from datetime import datetime, timedelta
import requests
import json
import os

from airflow import models
from airflow.decorators import task
from airflow.operators.python import PythonOperator
from airflow.hooks.base_hook import BaseHook
from airflow.exceptions import AirflowSkipException


import mediaflow.lib.sender as Sender
import mediaflow.lib.helper as Helper

#MEDIA_SERVER_URL = 'http://81.200.154.127:5000/video'
MEDIA_SERVER_URL = 'http://194.31.175.189:5000/video'
BOT_TOKEN = "6078932856:AAHyPSOhwkUsCFW9Zw5v7y-sInZ2LH5a0sE"
CID = "-1001950662813"
MIN_NEWS_COUNT = 1
NEWS_DIR = "./data/news"
#PROJECT_DIR = "./dags/masa/projects"
DAG_ID = "mediaflow"
INTERVAL = timedelta(minutes=10)
bot = Sender.TelegramWorker(BOT_TOKEN)

@task.python
def get_news(news_dir):
    news_ext = 'txt'
    files = Helper.files_in_directory(news_dir)
    if len(files) != 0:
        for file in files:
            if Helper.get_file_extension(file) == news_ext:
                file_name = Helper.get_file_name(file)
                s = file_name.split(".")
                project_name = s[0]
                data = Helper.read_file_lines(file)
                if data == None:
                    continue
                if len(data) < MIN_NEWS_COUNT:
                    continue
                project = {
                    'sample': project_name,
                    'file': file,
                    'data': data,
                }
                return project

    print('Empty news file list')
    raise AirflowSkipException
    #raise ValueError('Empty news file list')
    #return None



@task.python
def _get_news(news_dir, project_dir):
    files = Helper.files_in_directory(news_dir)
    if len(files) == 0:
        raise ValueError('Empty news file list')
    for file in files:
        file_name = Helper.get_file_name(file)
        s = file_name.split(".")
        #if len(s) != 2:
        #    raise ValueError('Bad file name:', file_name)
        project_name = s[0]
        data = Helper.read_file_lines(file)
        if data == None:
            continue

        project_file = project_dir + "/" + project_name + ".json"
        project = Helper.read_file_json(project_file)
        if project == None:
            continue

        project['name'] = project_name
        project['file'] = file
        project['data'] = data
        return project
    
    return None

@task.python
def generate_media(news):
    if news == None or len(news['data']) == 0:
        raise ValueError('News not set')
    
    #print("News :::::",news)
    response = requests.post(MEDIA_SERVER_URL, json=news)
    decoded_string = bytes(response.text, 'utf-8').decode('unicode-escape')
    data = json.loads(decoded_string)
    print('data :::::',data)
    if data['success'] == False:
        raise ValueError(data['error'])
        #raise AirflowSkipException
    
    news['url'] = data['url']
    return news
    #return decoded_string['url']

@task.python
def generate_post(news):
     text = "#%s" % news['sample']
     text = text.replace('_', '\_')
     post = {
              "text": text,
              "link": "none",
              "foto_link": [],
              "video_link": [news['url']]
     }
     # Удаляем новостной файл. Переделать
     os.remove(news['file'])
     print(post)
     return post


@task.python
def send_post(bot, cid, post):
     bot.send_media_post(cid, post)


with models.DAG(
    DAG_ID,
    schedule=INTERVAL,
    start_date=datetime(2023, 1, 1),
    catchup=False,
    tags=["masa", "polihoster", "mediaflow"],
) as dag: 
    news = get_news(NEWS_DIR)
    news_full = generate_media(news)
    post = generate_post(news_full)
    send_post(bot, CID, post)
